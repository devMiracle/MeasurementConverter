/**
 * Started writing this code on the Tuesday 25th July 2017 and finished on  Saturday 29th July 2017
 *          25/07/2017 ---- 29/07/2017
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package conversion.view;

import conversion.model.Conversion;

/**
 *
 * @author TheMiraTech --- TmT Product
 */

public class ConversionView extends javax.swing.JFrame {

    /**
     * Creates new form ConversionView
     */
    public ConversionView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        measureScale = new javax.swing.JComboBox();
        jTextField3 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        unitScale1 = new javax.swing.JComboBox();
        unitScale2 = new javax.swing.JComboBox();
        equalityLabel = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CONVERSION APPLICATION");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        measureScale.setBackground(new java.awt.Color(204, 204, 204));
        measureScale.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        measureScale.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lenth", "Area", "Volume" }));
        measureScale.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        measureScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                measureScaleActionPerformed(evt);
            }
        });

        jTextField3.setBackground(new java.awt.Color(255, 255, 255));
        jTextField3.setEditable(false);
        jTextField3.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(204, 0, 51));
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(measureScale, 0, 589, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(measureScale, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTextField1.setFont(new java.awt.Font("MingLiU_HKSCS-ExtB", 1, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        unitScale1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        unitScale1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foot", "Yard", "Inch" }));
        unitScale1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitScale1ActionPerformed(evt);
            }
        });

        unitScale2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        unitScale2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foot", "Yard", "Inch" }));
        unitScale2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitScale2ActionPerformed(evt);
            }
        });

        equalityLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        equalityLabel.setText("=");

        jTextField2.setBackground(new java.awt.Color(255, 255, 255));
        jTextField2.setEditable(false);
        jTextField2.setFont(new java.awt.Font("MingLiU_HKSCS-ExtB", 1, 18)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(unitScale1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(equalityLabel)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(unitScale2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(unitScale2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(equalityLabel)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(unitScale1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void measureScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_measureScaleActionPerformed
        // TODO add your handling code here:  
      //  measureScale.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lenth", "Area", "Volume" }));
        // unitScale1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foot", "Yard", "Inch" }));
        switch(measureScale.getSelectedIndex()){
            case 1:
                unitScale1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Square Foot", "Square Yard", "Square Inch" }));
                unitScale2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Square Foot", "Square Yard", "Square Inch"  }));
                   
                if(!jTextField1.getText().matches("-?\\d+(\\.\\d+)?"))
                    {
//                        jTextField3.setText("Enter A digit");
                        jTextField2.setText("");
                        jTextField1.setText("");
                    }
                    else {
                    allAreaMeasures();
                }
                break;
            case 2:
                unitScale1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cubic Foot", "Cubic Inch" , "Cubic Meter" }));
                unitScale2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cubic Foot", "Cubic Inch" , "Cubic Meter"  }));
                if(!jTextField1.getText().matches("-?\\d+(\\.\\d+)?"))
                    {
//                        jTextField3.setText("Enter A digit");
                        jTextField2.setText("");
                        jTextField1.setText("");
                    }
                else{
                    allVolumeMeasures();
                }
           
                break;
            case 0:
                unitScale1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foot", "Yard", "Inch" }));
                unitScale2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Foot", "Yard", "Inch" }));
                if(!jTextField1.getText().matches("-?\\d+(\\.\\d+)?"))
                    {
//                        jTextField3.setText("Enter A digit");
                        jTextField2.setText("");
                        jTextField1.setText("");
                    }
                else{
                    allLengthMeasure();
                }
        }
        
    }//GEN-LAST:event_measureScaleActionPerformed

    private void unitScale2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitScale2ActionPerformed
        // TODO add your handling code here:
            if(jTextField1.getText().isEmpty() || !jTextField1.getText().matches("-?\\d+(\\.\\d+)?")){
                jTextField3.setText("Enter A digit");
                jTextField2.setText("");
                
            }else{
            allLengthMeasure();
            allAreaMeasures();
            allVolumeMeasures();
            }
    }//GEN-LAST:event_unitScale2ActionPerformed

    private void unitScale1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitScale1ActionPerformed
        // TODO add your handling code here:
                
            if(!jTextField1.getText().matches("-?\\d+(\\.\\d+)?") ){
                jTextField3.setText("Enter A digit");
                jTextField2.setText("");
                //JOptionPane.showMessageDialog(null, "Enter digit");
            }
            allLengthMeasure(); 
            allAreaMeasures();
            allVolumeMeasures();      
    }//GEN-LAST:event_unitScale1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConversionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConversionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConversionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConversionView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ConversionView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel equalityLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JComboBox measureScale;
    private javax.swing.JComboBox unitScale1;
    private javax.swing.JComboBox unitScale2;
    // End of variables declaration//GEN-END:variables

    public void allLengthMeasure(){
             if(unitScale1.getSelectedItem() == "Foot" && unitScale2.getSelectedItem() == "Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.feetToInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Foot" && unitScale2.getSelectedItem() == "Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.feetToFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Foot" && unitScale2.getSelectedItem() == "Yard"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.feetToYard(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             
             else if(unitScale1.getSelectedItem() == "Yard" && unitScale2.getSelectedItem() == "Yard"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.yardToYard(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Yard" && unitScale2.getSelectedItem() == "Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.yardToFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Yard" && unitScale2.getSelectedItem() == "Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.yardToInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Inch" && unitScale2.getSelectedItem() == "Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.inchToInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Inch" && unitScale2.getSelectedItem() == "Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.inchToFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Inch" && unitScale2.getSelectedItem() == "Yard"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.inchToYard(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }   
    }
    public void allAreaMeasures(){
            if(unitScale1.getSelectedItem() == "Square Inch" && unitScale2.getSelectedItem() == "Square Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrInchToSqrInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Square Inch" && unitScale2.getSelectedItem() == "Square Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrInchToSqrFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Square Inch" && unitScale2.getSelectedItem() == "Square Yard"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrInchToSqrYard(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            
            else if(unitScale1.getSelectedItem() == "Square Yard" && unitScale2.getSelectedItem() == "Square Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrYardToSqrInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Square Yard" && unitScale2.getSelectedItem() == "Square Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrYardToSqrFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Square Yard" && unitScale2.getSelectedItem() == "Square Yard"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrYardToSqrYard(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Square Foot" && unitScale2.getSelectedItem() == "Square Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrFeetToSqrFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Square Foot" && unitScale2.getSelectedItem() == "Square Yard"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrFeetToSqrYard(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
             else if(unitScale1.getSelectedItem() == "Square Foot" && unitScale2.getSelectedItem() == "Square Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.sqrFeetToSqrInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
    }
    public void allVolumeMeasures(){
            if(unitScale1.getSelectedItem() == "Cubic Meter" && unitScale2.getSelectedItem() == "Cubic Meter"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubMeterToCubMeter(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Cubic Meter" && unitScale2.getSelectedItem() == "Cubic Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubMeterToCubFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Cubic Meter" && unitScale2.getSelectedItem() == "Cubic Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubMeterToCubInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            
            else if(unitScale1.getSelectedItem() == "Cubic Foot" && unitScale2.getSelectedItem() == "Cubic Meter"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubFeetToCubMeter(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Cubic Foot" && unitScale2.getSelectedItem() == "Cubic Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubFeetToCubFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Cubic Foot" && unitScale2.getSelectedItem() == "Cubic Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubFeetToCubInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            
            else if(unitScale1.getSelectedItem() == "Cubic Inch" && unitScale2.getSelectedItem() == "Cubic Meter"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubInchToCubMeter(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Cubic Inch" && unitScale2.getSelectedItem() == "Cubic Foot"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubInchToCubFeet(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }
            else if(unitScale1.getSelectedItem() == "Cubic Inch" && unitScale2.getSelectedItem() == "Cubic Inch"){
                    double input1 = Double.parseDouble(jTextField1.getText());
                    
                    Conversion cal = new Conversion();
                    double convert1 = cal.cubInchToCubInch(input1);
                    jTextField3.setText("");
                    jTextField2.setText(String.valueOf(convert1));
                }

    }
}